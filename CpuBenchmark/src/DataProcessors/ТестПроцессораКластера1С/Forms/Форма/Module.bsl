
#Область ОбработчикиСобытийФормы

// При создании на сервере.
// 
// Параметры:
//  Отказ - Булево - Отказ
//  СтандартнаяОбработка - Булево - Стандартная обработка
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ИмяТеста;
	
	Объект.РазмерЭталона = 0;
	
	// Резервируем адрес временного хранилища
	АдресДанныхЗамера = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор); 
	
	Элементы.Тест.СписокВыбора.Очистить();
	
	Для Каждого Стр Из Метаданные.Подсистемы.МногопоточныйТестКластера.Подсистемы.ТестыБезОбращенияКБД.Подсистемы.Тесты.Состав Цикл
		//Сообщить(Стр.Имя);
		
		//@skip-check server-execution-safe-mode
		Выполнить("ИмяТеста = "+Стр.Имя+".ИмяТеста();");
		
		Элементы.Тест.СписокВыбора.Добавить(Стр.Имя, ИмяТеста)
			
	КонецЦикла;
	
КонецПроцедуры

// Проверить выполнение теста.
&НаКлиенте
Процедура ПроверитьВыполнениеТеста() Экспорт
	Если ПроверитьВыполнениеЗаданиеНаСервере() Тогда
		ОтключитьОбработчикОжидания("ПроверитьВыполнениеТеста");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// Тест при изменении.
// 
// Параметры:
//  Элемент - ПолеФормы - Элемент
&НаКлиенте
Процедура ТестПриИзменении(Элемент)
	
	//@skip-check bsl-legacy-check-execute-statement
	Выполнить("Объект.РазмерЭталона = "+Тест+".КоличествоИтераций();");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Запустить.
// 
// Параметры:
//  Команда - КомандаФормы - Команда
&НаКлиенте
Процедура Запустить(Команда)
	
	Если ПустаяСтрока(Тест) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле = "Тест";
		Сообщение.Текст = "Необходимо выбрать тест";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Элементы.ГруппаПанельТеста.Видимость = Ложь;
	Элементы.ГруппаОжидатьЗавершенияФЗ.Видимость = Истина;
	Элементы.ФормаЗапустить.Доступность = Ложь;
	
	ОтображениеСостояния = Элементы.ТабДок.ОтображениеСостояния;
 	ОтображениеСостояния.Видимость = Истина;
 	ОтображениеСостояния.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
 	ОтображениеСостояния.Текст = НСтр("ru = 'Ожидание завершения работы фоновых заданий. Ждите....'");	
		
	Если ЗапуститьЗаданиеНаСервере(Тест) Тогда	
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеТеста", 15, Ложь );
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Запустить задание на сервере.
// 
// Параметры:
//  ИмяМодуляТеста - Строка - Имя модуля теста
// 
// Возвращаемое значение:
//  Булево - Запустить задание на сервере
&НаСервере
Функция ЗапуститьЗаданиеНаСервере(Знач ИмяМодуляТеста)
	ПараметрыЗадания = Новый Массив(2);
	ПараметрыЗадания[0] = Объект.РазмерЭталона;
	ПараметрыЗадания[1] = АдресДанныхЗамера;
	
	Задание = ФоновыеЗадания.Выполнить(ИмяМодуляТеста+".ВыполнитьТест",
				ПараметрыЗадания,
				Строка(Новый УникальныйИдентификатор()),
				ИмяМодуляТеста+".ВыполнитьТест"
			  );
		
	Задание = Задание.ОжидатьЗавершенияВыполнения(2);
		
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		КлючЗадания = Задание.УникальныйИдентификатор;
				
		Возврат Истина;
	КонецЕсли;
	
	ОтобразитьДиаграммыПроизводительности();
				
	Возврат Ложь;			
				
КонецФункции

// Проверить выполнение задание на сервере.
// 
// Возвращаемое значение:
//  Булево - Проверить выполнение задание на сервере
&НаСервере
Функция ПроверитьВыполнениеЗаданиеНаСервере()
		
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(КлючЗадания);

	Задание = Задание.ОжидатьЗавершенияВыполнения(1);		
				
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда			
		Возврат Ложь;
	КонецЕсли;
	
	ОтобразитьДиаграммыПроизводительности();
	
	Возврат Истина;
	
КонецФункции

// Отобразить диаграммы производительности.
&НаСервере
Процедура ОтобразитьДиаграммыПроизводительности()
	
	ДанныеЗамера = ПолучитьИзВременногоХранилища(АдресДанныхЗамера);
	
	ДиаграммаПроизводительностиЯдра.Точки.Очистить();
	ДиаграммаПроизводительностиЯдра.Серии.Очистить();
	
	Диаграмма.Точки.Очистить();
	Диаграмма.Серии.Очистить();
	
	ВремяВыполнения = Диаграмма.Серии.Добавить("Время выполнения, мс");
	
	Инфо = Новый СистемнаяИнформация();
		
	Процессор     = ДиаграммаПроизводительностиЯдра.Точки.Добавить(Инфо.Процессор);
	ОперацийВСекунду = ДиаграммаПроизводительностиЯдра.Серии.Добавить("Операций в секунду");
	
	Для Каждого Стр Из ДанныеЗамера Цикл
		Точка = Диаграмма.Точки.Добавить(Стр.Наименование);
	
		Диаграмма.УстановитьЗначение(Точка,ВремяВыполнения, Стр.Длительность , "", "" );
		
		Если Стр.Наименование = "1" Тогда
			Производительность = Окр( (Стр.КоличествоЭлементов*2) / (Стр.Длительность/1000)); 
			ДиаграммаПроизводительностиЯдра.УстановитьЗначение(Процессор,ОперацийВСекунду ,Производительность);
		КонецЕсли;
		
	КонецЦикла;		

	Элементы.ГруппаОжидатьЗавершенияФЗ.Видимость = Ложь;
	Элементы.ГруппаПанельТеста.Видимость = Истина;
	Элементы.ФормаЗапустить.Доступность = Истина;	
	Элементы.ТабДок.ОтображениеСостояния.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти
